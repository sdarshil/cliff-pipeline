- name: kubernates repo create
  copy: 
    src: "kubernetes.repo"
    dest: "/etc/yum.repos.d/kubernetes.repo"

     
      


- name : check package available or not 
  package_facts:
      manager: rpm

- name: Install kubelet
  shell: "yum install kubelet -y"


       
- name: Install docker
  shell: "yum install docker -y"


- name: Install kubeadm
  shell: "yum install kubeadm -y"


- name: Install kubectl
  shell: "yum install kubectl -y"


- name: start docker service
  service:
    name: docker
    state: started
    enabled: yes

- name: start kubelet service
  service:
      name: kubelet
      state: started
      enabled: yes

- name: creating docker dir
  file:
   path: "/etc/docker"
   state: directory
- name: change docker driver
  copy:
   src: "daemon.json"
   dest: "/etc/docker/daemon.json"  
- name: ipforward set on
  shell: "echo 1 > /proc/sys/net/ipv4/ip_forward"

- name: restarting docker
  shell: "systemctl restart docker "

- name: Install iproute-tc
  shell: "yum install iproute-tc -y"
  when: "'iproute-tc' not in ansible_facts.packages"

- name: creating file for iptable
  file: 
     path: "/etc/sysctl.d/k8s.conf"
     state: touch

- name: eding content in file
  copy: 
     dest: "/etc/sysctl.d/k8s.conf"
     content: |
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1

- name: sysctl reloading
  shell: "sysctl --system"

- name: kubeadm init
  shell: "kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all"
  ignore_errors: yes
  register: init 

- name: " creating .kube dir "
  shell: "mkdir -p $HOME/.kube"

- name: "copying admin.conf to .kube/config"
  shell: "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"

- name: "chnanging owner permission" 
  shell: "sudo chown $(id -u):$(id -g) $HOME/.kube/config"


- name: "running flannel cmd"
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

- name: "genrating tokens"
  shell: "kubeadm token create --print-join-command" 
  register: token
  ignore_errors: yes

- debug: 
     var: token.stdout_lines

- local_action:
        module: copy
        content: "token: {{ token.stdout}}"
        dest: "/root/cliffjob/configure/aws_k8s/worker/setup/vars/main.yml"

